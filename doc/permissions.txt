The OCO permissions system allows setting up membership classes, and to define
the level of access a membership class has to the system.

Each member class is associated with a list of permission flags which turn
individual features on or off. These are stored as Clauses in the constitution,
which means membership class permission changes are made in the form of a
change to the constitution.

(Implementation detail: permissions are stored as boolean flags in the 
"clauses" database table; in the absence of such a permission entry for a 
particular member class the default is to _not_ grant access.)

 ============================
 = The Membership Lifecycle =
 ============================

# TODO

 ==============================
 = Setting up an Organisation =
 ==============================

# TODO

 =============================
 = Adding new Member Classes =
 =============================

# TODO

Here's the current ghetto version:

$ ./script/rails console
> directors = MemberClass.find_or_create_by_name('Director')
> directors.set_permission(:constitution_proposal, true)
> directors.set_permission(:membership_proposal, true)
> directors.set_permission(:freeform_proposal, true)
> members = MemberClass.find_or_create_by_name('Member')
> members.set_permission(:constitution_proposal, false)
> members.set_permission(:membership_proposal, true)
> members.set_permission(:freeform_proposal, true)

 =======================
 = List of Permissions =
 =======================

* :constitution_proposal -- create proposals for any kind of constitutional change
* TODO :constitution_vote -- vote on such a proposal
* :membership_proposal -- create proposals for adding or ejecting members, or changing their member class
* TODO :membership_vote -- vote on such a proposal
* :freeform_proposal -- create freeform proposals
* TODO :freeform_vote -- vote on such a proposal